//地柜
void insert_tree_demo(b_tree * bt, int  value)
{
	int left = 0;
	int right = 0;
	std::cout << "please input new node value:" << value << endl;
	if (!bt)
	{
		bt = create_tree(value);
		return ;
	}
	if (bt->value == value)
		return ;
	else if (bt->value > value)
	{
		if (bt->left == NULL)
		{
			bt->left = create_tree(value);
			return ;
		}
		else
		{
			insert_tree3(bt->left, value);
		}

	}
	else if (bt->value < value)
	{
		if (bt->right == NULL)
		{
			bt->right = create_tree(value);
			return ;
		}
		else
		{
		
			 insert_tree3(bt->right, value);
		}

	}


}

//第二种地柜
void insert_tree_demo2(b_tree * bt, int  value)
{
	
	std::cout << "please input new node value:" << value << endl;
	if (!bt)
	{
		bt = create_tree(value);
		return;
	}
	if (bt->value == value)
		return;
	if (bt->value > value&& bt->left == NULL)
	{
		bt->left = create_tree(value);
		return;
	}
	if (bt->value < value&& bt->right == NULL)
	{
		bt->right = create_tree(value);
		return;
	}

	 if (bt->value > value)
	{
	
			insert_tree3(bt->left, value);
	

	}
	else if (bt->value < value)
	{
	

			insert_tree3(bt->right, value);
	

	}


}

// 非递归
b_tree * insert_tree4(b_tree * bt, int  value)
{

		
	b_tree * head = bt;
	std::cout << "please input new node value:" << value << "\t"<<bt <<endl;

run:
	if (!bt)
	{
		bt = create_tree(value);
		return head;
	}
	
	if (bt->value == value)
		return bt;
	else if (bt->value > value)
	{
		if (bt->left == NULL)
		{
			bt->left = create_tree(value);
			//return 	bt->left;
			
		}
		else
		{
			std::cout << "please input new node value left:" << value << "\t" << bt->left << endl;
		   // head =  insert_tree3(bt->left, value);

			bt = bt->left;
			goto run;
		}

	}
	else if (bt->value < value)
	{
		if (bt->right == NULL)
		{
			bt->right = create_tree(value);

			//	return bt->right;
			
		}
		else
		{
		
			std::cout << "please input new node value right:" << value << "\t" << bt->right << endl;
			//head= insert_tree3(bt->right, value);
			bt = bt->right;
			goto run;
		}

	}
	return head;

}



//same return 1,not return 0
int treeis_same(tree * p, tree * q)
{
	if (p == NULL&&q || q == NULL&&p)
		return -1;
	else if (p == NULL&&q == NULL)
		return 0;//?
	else
	{
		if (p->value != q->value)
			return -1;
		else {
			treeis_same(p->left, q->left);
			treeis_same(p->right, q->right);
		}
	}

}

//0 is iso ,other is not
int treeis_iso(tree * node)
{
	//null ,head is 1
	if (node == NULL)
		return 1;
	else if (node&&node->left == NULL &&node->right == NULL)
		return 1;
	tree * p = node;
	tree * q = node;
	tree * p1 = NULL;
	tree * q1 = NULL;
loop:
	p1 = p;
	q1 = q;
	p = p->left;
	q = q->right;
err:
	if (p == NULL&&q || q == NULL&&p)
		return -1;
	else
	{
		if (p == NULL&&q == NULL)
		{
			p = p1->right;
			q = q1->left;
			if (p == NULL&&q == NULL)
				return 0;
			else
				goto err;
		}
		else
		{
			if (p->value != q->value)
				return -1;
			else {
				goto loop;

			}
		}

	}
	
}

//地柜
int treeis_iso(tree * root)
{
	int dep = 0;
	if (root == NULL && dep == 0)
		return 1;
	else if (dep == 0&& root&&root->left == NULL &&root->right == NULL)
		return 1;
	
	if (root->left->value != root->right->value && dep == 0)
		return 0;
	if (1);
}


//min high
int min_high(tree * tr)
{
	
	if (tr == NULL)
	{
		cout << "null:" << endl;
		return 0;
	}

	if (tr->left == NULL&&tr->right == NULL)
	{
		cout << "child<<"<<tr->value << endl;
		return 1;
	}

	
	int left = min_high(tr->left);
	int right = min_high(tr->right);
	if(tr->left == NULL || tr->right == NULL)
		return left +right+ 1;
	if (left <=  right)
		return left + 1;
	else
		return right + 1;
	cout << tr->value << endl;
	
}

//cengci
void  trr(tree * root, int n)
{
	//static int  i = 1;
	//if (i == 1)
	//{
	//	cout <<"root:" <<root->value <<endl;
	//	if (root->left || (root->right))
	//	i = 0;
	//}
	//
	//if (i == 2)
	//{
	//	if (root->left)
	//	cout << "left:" << root->left->value << endl;
	//	if (root->right)
	//	cout << "right:" << root->right->value <<endl;
	//	i--;
	//	
	//}
	//if (i == n)
	//{
	//	cout << "leaf:" << root->value << endl;
	//	return;
	//}
	if (root == NULL || n<0)
	{
		cout << ";;;;;;;;;;;;;:" << endl;
		return ;
	}
	if (n == 0)//(!(root->left == NULL &&root->right == NULL) && n ==0)
	{
		//cout << "return again" << endl;
		std::cout << "root:" << root->value << endl;
		return ;
	}
	

	 trr(root->left, n-1);
	 trr(root->right, n-1);//n-2
}



void itor2(tree * root)
{

	int n = get_level(root);
	//int n_l;
	//int n_r;
	//if (root)
	//{
	//	std::cout << "root:" << root->value << endl;
	//	 n_l = get_level(root->left);
	//	 n_r = get_level(root->right);
	//}
	//std::cout << "left and right:" << n_l <<n_r<< endl;
	//if (n_l == n_r)
	//{
	//	trr(root, n_l + 1);
	//}

	//else if(n_l > n_r)
	//{
	//	 trr(root, n_r + 1);
	//	trr(root, n_l - n_r);
	//}
	//else
	//{
	//	trr(root, n_r + 1);
	//}

	std::cout << "roo000000000000t:" << root->value << endl;
	int i = 0;
	for (i = 1; i < n; i++)
	{
		trr(root, i);
	}
	

}

//左叶子节点之和
int left_sum(tree * tr)
{
	static int num = 0;
	if (tr == NULL)
	{
		cout << "null:" << endl;
		return 0;
	}

	

	if (tr->left && tr->left->left == NULL&&tr->left->right == NULL)
	{
		cout << "left child:" << tr->left->value << endl;
		num += tr->left->value;
	}
	//
	//int left = left_sum(tr->left);

	//if (left >= 0)
	//	cout << left << "left" << endl;
	//int right = left_sum(tr->right);

	//if (right >= 0)
	//cout << "right" << right << endl;

	left_sum(tr->left);
	left_sum(tr->right);
	cout << "num" << num << endl;
	return num;
}




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* inorderTraversal(struct TreeNode* root, int* returnSize){

}

//中序遍历，非递归
typedef struct n {
	struct n * prev;
	struct n * next;
	tree * t;
}node_t;

node_t * node = NULL;
int stack[100] = {0};
void insert(node_t * p)
{
	if (p)
	{
		node->next = p;
		p->prev = node;
		node = p;
		node->next = NULL;
	}

}
void mid_itor(tree * root)
{
	int i = 0;
	tree * old = root;
	tree * left_root = NULL;
	node = new node_t;
	memset(node, 0, sizeof(node_t *));

	while (root)
	{
		node_t * one = new node_t;
		one->t = root;
		insert(one);

		left_root = root;
		root = root->right;

	}

	root = left_root;
	cout << "ago right i=" << i << endl;
	stack[i++] = root->value;
	cout << "after right i=" << i << endl;

	while (node->t != old)
	{
		stack[i++] = node->prev->t->value;
		if (node->prev->t->left)
		{
			stack[i++] = node->prev->t->left->value;
			//back the father node
			cout << "leftest right value============" << endl;
		}
		node = node->prev;
	}
	i--;

	int j = i;
	cout << "total right i=" << i << endl;
	while (j >= 0)
		cout << stack[j--] << " i=" << j << endl;


	////next is left sub tree
	tree * left = old->left;
	tree * back = NULL;
	int flag = 0;
	while (left)
	{
		root = left;// old->left;
		cout << "left root value0: " << root->value << endl;
	
		while (root)
		{

			node_t * one2 = new node_t;
			one2->t = root;
			insert(one2);
		/*	cout << "INSERT============" << endl;*/
			left_root = root;
			root = root->right;
		
				
		}
		root = left_root;
	
		cout<<node->prev->t->left->value << endl;

		if (back&& back == root)
		{
			cout << "back==========: " << back->value << endl;
			//在back 赋值的地方已经插入了，这里不用了
		}
		else
		{
			cout << "left root value1==========: " << root->value << endl;
			stack[i] = root->value;
			i++;
		}
		cout << "left root value2: " << left->value << endl;
		cout << "node->t value: " << node->t->value << endl;
		cout << "node->prev->t value: " << node->prev->t->value << endl;
		while (node->t != left)
		{
			cout << "node->prev->t value 2===========: " << node->prev->t->value << endl;
			stack[i++] = node->prev->t->value;
			if (node->prev->t->left)
			{
				cout << "ago right 2 i=" << i <<"\t"<< node->prev->t->value<<"\tnode value:"<< node->t->value<< endl;
				if (node->prev->t->left->right == NULL)
				{
					cout << "LEAVE THE ROOT ADD" << endl;
				/*}
				else
				{*/
					stack[i++] = node->prev->t->left->value;
					back = node->prev->t->left;
				}
				
				cout << "after right 2 i=" << i << "\t" << node->prev->t->left->value << "\tnode value:" << node->t->value << endl;
				//back the father node
			/*	cout << "leftest right value============" << endl;*/
			}
			node = node->prev;
		}
		/*stack[i++] = left->value;*/

		left = left->left;
	}


	i--;
	//pop(stack);
	while (i >= 0)
	{
		cout << i << '\t' << stack[i] << endl;
		i--;
	}


}



//合并两个有序数组
int convert(int a[], int m, int b[], int n)
{
	int i = 0;
	int j = 0;
	for (j = 0; j < n; j++)
	{
		if (a[i] <= b[j])
		{
			int k = 0;
			for (k = m; k > i+1 ; k--)//m
			{
				a[k] = a[k-1];
				cout<<"k:" << a[k] << a[k + 1] << endl;
			}

			a[i + 1] = b[j];

			int l = 0;
			i++;
		
			for (l = i; l < m ; l++)
			{
				if (a[l] >= a[l + 1])//=
				{
					swap(&a[l], &a[l + 1]);
					cout<<"l:" << a[l] << a[l+ 1] << endl;
				}
				else
				{
					i = l;
					break;
				}
				
			}
			m++;
		}
		else
		{
			int k2 = 0;
			for (k2 = m; k2 > i  ; k2--)//m-1?
			{
				a[k2] = a[k2-1];
				cout <<"k2:"<< a[k2] << a[k2 + 1] << endl;
			}

			a[k2] = b[j];
			i++;
			m++;

			
		}

	}
	return 0;
}


//杨慧三角
void  yang(int num)
{
	
	int i = 0;
	int j = 0;
	int a[10][10];

	//j line num,i comn num
	for (j = 0; j <= num - 1; j++)
	{
		for (i = 0; i <= j; i++)
		{
		
			if (j == 0||j ==1)
			{
				a[i][j] = 1;
				cout << a[i][j] << "\t";
			}
			else if (i == j || i ==0)
			{
				a[i][j] = 1;
				cout << a[i][j] << "\t";
			}
			else
			{
			
				a[i][j] = a[i - 1][j - 1] + a[i][j - 1];
				cout << a[i][j] << "\t";
		
			
			}
			
		}
		cout << endl;
	}

}



//qsort
void qs(int a[], int left, int right)
{
	int i = left;
	int j = right;
	int tem = a[i];
	if (left >= right)
		return;
	while (i<j)
	{
	/*	cout << "a" << a[i] << endl;*/
		while (i<j &&a[j] > tem)
		{
			j--;
		}
	

		if (j > i)
		{
			cout << "0i:" << i << endl;
			a[i++] = a[j];
			cout << "i:" << i << endl;
		}
		else
			break;
	

		while (i<j&&a[i] < tem)
		{
			i++;
		/*	cout << "i:" << i << endl;*/
		}
		cout << "0j:" << j << endl;
		if (j > i)
		{

			a[j--] = a[i];
			cout << "j:" << j << endl;
		}
		else
			break;


	}
	a[i] = tem;
	//cout << "k:" <<i<< a[i] << endl;
	//cout << "k:" << a[0] << endl;
	//cout << "k:" << a[1] << endl;
	//cout << "k:" << a[2] << endl;
	//cout << "k:" << a[3] << endl;


	//for (i = 0; i <6; i++)
	//	cout <<"ll:"<< a[i] << endl;
	qs(a, left, i - 1);
	qs(a, i + 1, right);
}
