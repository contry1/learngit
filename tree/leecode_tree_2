int flag = 1;
int treeis_same(tree * p, tree * q)
{
	if (p == NULL&&q || q == NULL&&p)

		return 0;
	else if (p == NULL&&q == NULL)
		return -1;//?

	int f1 = treeis_same(p->left, q->left);
	int f2 = treeis_same(p->right, q->right);

	if (p->val != q->val)
	{
		cout << "value p1: " << p->val << endl;
		cout << "value q1: " << q->val << endl;
		flag = 0;
		return 0;
	}
	
	else
	{
		cout << "value p: " << p->val << endl;
		cout << "value q: " << q->val << endl;
		//return 1;
	}
	cout << "f1: f2:    " << f1<<f2 << endl;
//	return flag;

}



int iso(tree * p, tree * q)
{
	if (p == NULL&&q || q == NULL&&p)
		return 0;
	else if (p == NULL&&q == NULL)
		return 1;//?
	//iso(p->left,q->right);
	//iso(p->right, q->left);

	if (p->val != q->val)
		return 0;
	else
	{
		return iso(p->left, q->right)&& iso(p->right, q->left);
	}
		//return 1;
}
int treeis_iso(tree * node)
{
	if (root == NULL)
		return 1；
	if (root && root->left == NULL && root->right == NULL)
		return 1；
	return iso(node->left,node->right);
}




bool path(struct TreeNode* left, struct TreeNode* right,int sum)
{
    if(left == NULL || right == NULL)
        return 0;
    if(left->val + right->val == sum)
        return 1;
    return path();
}

bool hasPathSum(struct TreeNode* root, int sum){
    if(root == NULL)
        return 0;
    if(root && root->left == NULL && root->right== NULL && root->val == sum)
        return 1;
    return path(root->left,root->right,sum);
}


int num = 0;
char * pre(char ** str, int size)
{
	int i = 0;
	int j = 0;
	//过滤异常情况
	if (size <= 0)
		return NULL;
	for (i = 0, j = 1; i < size - 1, j<size; i++, j++)
	{
		if (*str[i] == *str[j])
		{
			cout << "i: \t" << *str[i] << "j: " << *str[j] << __LINE__ << endl;
			continue;
		}
		else
		{
			cout << "i: \t" << *str[i] << "j: " << *str[j] << __LINE__ << endl;
			return NULL;
		}
		
	}
	num++;

	//second and other num
loop:
	for (i = 0, j = 1; i < size - 1, j<size; i++, j++)
	{
		if (*(str[i] + num) == '\0' || *(str[j] + num) == '\0')
		{
			//num--;
			goto exits;
		}
			
		if (*(str[i]+num) == *(str[j]+num))
		{
			cout << "i: \t" << *(str[i] + 1) << "j: " << *(str[j] + 1) << __LINE__ << endl;
		
			continue;
		}
		else
		{
			cout << "i: \t" << *(str[i] + 1) << "j: " << *(str[j] + 1) << __LINE__ << endl;
			goto exits;
		}
	}
	num++;
	goto loop;

	//*(++str[0]) = '\0';
	/*char *p[1] = str;
	p++;
	*p = '\0';*/
	//cout << "i: \t" << *(str[0]+1) << "j: " << *((str[1])+1) << __LINE__ << endl;
exits:	
	//char * p = new char;
	//memset(p,'\0',strlen(str[0]));
	//memcpy(p,str[0],num);
	cout << "i: \t" << *(str[0] + num) << "num: " << num << __LINE__ << endl;
	char * p = NULL;
	p =	&str[0][2];
	*(p) = '\0';
	//str[0][2] = '\0';
	//cout << "i: \t" << *(str[i] + num) << "num: " << num << __LINE__ << endl;
	return *str;
}
//REVERSE  LINK
link2* q;
link2*  re(link2* node)
{

	if (node->next == NULL)
	{
	
		q = node;
		return node;
	}
	
	//if (node == NULL)
	//	return NULL;
	cout << node->val << endl;

	link2* p = node->next;
	
	cout << "p0:" << p->val << endl;
//	cout << "po:"  << endl;
	re(node->next);
	//p = node->next;
	p->next = node;
	cout << "next:" << p->next->val << endl;
	node->next = NULL;
	p = node;
	cout << "p:"<<node->val << endl;


	return q;
}

//jainfa  total path

int oath(tree * root,int sum)
{

	if (root == NULL)
	{
		return 0;
	}

	if (root->left == NULL && root->right == NULL)
	{
		if (root->val == sum)
			return 1;
		else
			return 0;
	}

	return oath(root->left,sum-root->val) || oath(root->right, sum - root->val);

}



tree * inver(tree * root)
{
	if (root == NULL)
	{
		return NULL;
	}
	tree * p = root->left;
	root->left = root->right;
	root->right = p;

	inver(root->left);
	inver(root->right);

	return root;
}

//最近龚工祖先
tree * ans(tree * root, tree *p, tree * q)
{
	if (root == NULL)
	{
		return NULL;
	}
	
	if (p->val <= root->val && q->val <= root->val)
	{
		return ans(root->left, p, q);
	}
	else if (p->val <= root->val && q->val <= root->val)
	{
		return ans(root->right, p, q);
	}
	else
	{
		return root;
	}


}


快乐数
int fun(int n)
{

loop:
	int index = 1;
	while (n / 10 != 0)
	{
		index++;
		n = n / 10;
	}

	int  i = 0;
	int num[1000];
	for (i = 0; i <index; i++)
	{
		num[i] = n % 10;
		n = n / 10;
	}

	int t1 = 0;
	for (i = 0; i < index; i++)
	{
		t1 += num[i] * num[i];
	}

	if (t1 == 1)
		return  1;
	else
	{
		n = t1;
		goto loop;
	}

}

int fun(int n)
{
	int index = 0;
	int t[1000] = {0};
	int j = 0;
loop:
	index = 1;
	int back = n;
	int total = n;
	while (total / 10 != 0)
	{
		index++;
		total = total / 10;
	}

	int  i = 0;
	int num[1000];
	for (i = 0; i <index; i++)
	{
		num[i] = back % 10;
		back = back / 10;
	}

	int t1 = 0;
	for (i = 0; i < index; i++)
	{
		t1 += num[i] * num[i];
		cout << t1 << endl;
	}
	t[j++] = t1;
	cout <<"hh"<< t1 << endl;
	if (t1 == 1)
	{
		return  1;
	}
	
	else
	{
		int m = 0;
		for (m = 0; m < j - 1; m++)
		{
			cout << "tm:" << t[m] << endl;
			if (t[m] == t1)
				return 0;
		}
	
		n = t1;
		cout << "n:" << t1 << endl;
		goto loop;
	}

}


、、合并来拿吧
link*  combine(link* node1, link* node2)
{
	link* root;
	if (node1 == NULL && node2 == NULL)
		return NULL;
	if (node1 == NULL && node2)
	{
		cout << "node22:" << node2->val << endl;
		return node2;
	}
		
	if (node2 == NULL && node1)
	{
		cout << "node11:" << node1->val << endl;
		return  node1;
	}
	
	if (node1->val <= node2->val)
	{
		root = node1;
		cout << "node1:" << node1->val << endl;
		root->next =  combine(node1->next, node2);
	}
	else
	{
		root = node2;
		cout << "node2:" << node2->val << endl;
	//	node1->next = node2;
		root->next = combine(node1 , node2->next);
	}


	

	return root;
	

}


link*  del(link* node, int n)
{
	link*  prev = node;
	link*  last = node;
	link*  del_n = node;
	while (n)
	{
		last = last->next;
		n--;
	}

	while (last)
	{
		del_n = prev;
		last = last->next;
		prev = prev->next;
	}
	link*  p = prev;
	del_n->next = p->next;
	free(p);
	return node;
}



char * longestCommonPrefix(char ** strs, int strsSize){
    int i = 0;
    int num = 0;
	int j = 0;
	//过滤异常情况
	if (strsSize <= 0||strsSize <1)
		return "";
	for (i = 0, j = 1; i < strsSize - 1, j<strsSize; i++, j++)
	{
		if (*strs[i] == *strs[j])
		{
		//	cout << "i: \t" << *str[i] << "j: " << *str[j] << __LINE__ << endl;
			continue;
		}
		else
		{
		//	cout << "i: \t" << *str[i] << "j: " << *str[j] << __LINE__ << endl;
			return "";
		}
		
	}
	num++;

	//second and other num
loop:
	for (i = 0, j = 1; i < strsSize - 1, j<strsSize; i++, j++)
	{
		if (*(strs[i] + num) == '\0' || *(strs[j] + num) == '\0')
		{
			//num--;
			goto exits;
		}
			
		if (*(strs[i]+num) == *(strs[j]+num))
		{
		//	cout << "i: \t" << *(str[i] + 1) << "j: " << *(str[j] + 1) << __LINE__ << endl;
		
			continue;
		}
		else
		{
		//	cout << "i: \t" << *(str[i] + 1) << "j: " << *(str[j] + 1) << __LINE__ << endl;
			goto exits;
		}
	}
	num++;
	goto loop;

	//*(++str[0]) = '\0';
	/*char *p[1] = str;
	p++;
	*p = '\0';*/
	//cout << "i: \t" << *(str[0]+1) << "j: " << *((str[1])+1) << __LINE__ << endl;
    char * p = NULL;
  
exits:	
    p =  (char *)malloc(sizeof(char *));
	memset(p,'\0',strlen(strs[0]));
	memcpy(p,strs[0],num);
//	cout << "i: \t" << *(str[0] + num) << "num: " << num << __LINE__ << endl;
	// char * p = NULL;
	// p =	&str[0][2];
	// *(p) = '\0';
	//str[0][2] = '\0';
	//cout << "i: \t" << *(str[i] + num) << "num: " << num << __LINE__ << endl;
	return p;
}


//二叉树公共z
bool is_father(tree *root, tree * son)
{
	if (root == NULL)
		return 0;
	if (root->val == son->val)
		return 1;

	return is_father(root->left) || is_father(root->right);

}

tree * father(tree * root, tree *p, tree * q)
{
	if (root == NULL)
	{
		return NULL;
	}

	if (is_father(p, q) == 1)
		return p;
	else if (is_father(q, p) == 1)
		return q;
	else
		return root;
	


}


typedef struct queue_t {
	int rd;
	int wr;
	//int data[100];//tree * r = pop(q);//这里提示错误，所以需要重新定义queue结构体
	tree node[100];

}queue;

//void push(queue * que, int value)
//{
//	if (que == NULL)
//		return;
//	cout << "que->wr:  " << que->wr << endl;
//	que->data[que->wr++] = value;
//	cout << "que->wr2:  " << que->wr << endl;
//	cout << "que->rd2:  " << que->rd << endl;
//}

//int pop(queue * que)
//{
//	if (que == NULL)
//		return -1;
//	cout << que->data[que->rd] << endl;
//	que->wr--;
//	return que->data[que->rd];
//}

int ias_empty(queue *q)
{
	if (q == NULL)
	{
		return 1;
	}
	if (q->wr == q->rd)
		return 1;
	else
		return 0;
}

void bfs1(tree * root)
{
	if (root == NULL)
	{
		return;
	}

	queue * q = (queue *)malloc(sizeof(queue ));
	if (q == NULL)
		return;
	memset(q, 0, sizeof(queue));
	q->wr = 0;
	q->rd = 0;

	//push(q, root->val);
	tree * prev = NULL;
	//pop(q);
	//while (ias_empty(q) == 0)
	while (q->wr)
	{
	/*	pop(q);*/
	
		prev = root;
		root = root->left;
		cout << "root val:  " << root->val << endl;
	/*	push(q, root->val);*/
	}
	//root = prev->right;
	//push(q, root->val);
	//pop(q);

}


void push_demo(queue * que, int value)
{
	if (que == NULL)
		return;
	cout << "que->wr:  " << que->wr << endl;
	que->node[que->wr].val = value;
	cout << "que->wr2:  " << que->wr << endl;
	cout << "que->rd2:  " << que->rd << endl;
}

tree * pop_demo(queue * que)
{
	if (que == NULL)
		return NULL;
	cout << que->node[que->rd].val << endl;

	return &que->node[que->rd];
}


void pop_demo2(queue * que,int num)
{
	if (que == NULL)
		return ;
	int i = 0;
	for (i = 0; i < num; i++)
	{
		cout << que->node[i].val << endl;
	}
	

	//return &que->node[que->rd];
}

int ** bfs_demo(tree * root,int * returnsize,int **returncolumnsize)
{
	if (root == NULL)
	{
		return NULL;
	}
	int ** ret = (int **)calloc(100,sizeof(int*));
	*returncolumnsize = (int*)calloc(100,sizeof(int));

	queue * q = (queue *)malloc(sizeof(queue));

	if (q == NULL)
		return NULL;
	memset(q, 0, sizeof(queue));
	q->wr = 0;
	q->rd = 0;

	push_demo(q, root->val);
	q->node[q->wr].left = root->left;
	q->node[q->wr].right = root->right;

	//&q->node[q->wr] = root;

	q->wr++;

	//returnsize[(*returncolumnsize)] = root->val;
	*returnsize = 0;
	int len = q->wr-q->rd;

	while (len >0)
	{
		ret[*returnsize] = (int *)calloc(len,sizeof(int));
		(*returncolumnsize)[*returnsize] = len;
		int i = 0;
		for (i = 0; i < len; i++)
		{
			if (q->node[q->rd].left != NULL)
			{
				
				q->node[q->wr] = *(q->node[q->rd].left);
				push_demo(q, q->node[q->rd].left->val);
				q->wr++;
				cout << "q->wr1  " << q->wr << endl;
			}
			if (q->node[q->rd].right != NULL)
			{
				q->node[q->wr] = *(q->node[q->rd].right);
				push_demo(q, q->node[q->rd].right->val);
				q->wr++;
				cout << "q->wr2  " << q->wr << endl;
			}
			ret[*returnsize][i] = q->node[q->rd].val;
			q->rd++;
		}
		(*returnsize)++;
		len = q->wr - q->rd;

	}



	//cout << "bfs :begin "<< endl;
	//cout << "que-:  " << q->wr << endl;
	//pop_demo2(q, q->wr);
	//cout << "bfs :finish " << endl;
	//return q->wr;

	return ret;
}


int ** bfs_demo2(tree * root, int * returnsize, int **returncolumnsize)
{
	if (root == NULL)
	{
		return NULL;
	}
	int ** ret = (int **)calloc(100, sizeof(int*));
	*returncolumnsize = (int*)calloc(100, sizeof(int));

	queue * q = (queue *)calloc(100,sizeof(queue));
	if (q == NULL)
		return NULL;


	//q->node[q->wr].val = root->val;
	//q->node[q->wr].left = root->left;
	//q->node[q->wr].right = root->right;
	//dengjiayuxiam 
	q->node[q->wr] = *root;

	q->wr++;

	//returnsize[(*returncolumnsize)] = root->val;
	*returnsize = 0;
	int len = q->wr - q->rd;

	while (len >0)
	{
		ret[*returnsize] = (int *)calloc(len, sizeof(int));
		(*returncolumnsize)[*returnsize] = len;
		int i = 0;
		for (i = 0; i < len; i++)
		{
			if (q->node[q->rd].left != NULL)
			{

				q->node[q->wr] = *(q->node[q->rd].left);
				q->node[q->wr].val = q->node[q->rd].left->val;
				q->wr++;
				cout << "q->wr1  " << q->wr << endl;
			}
			if (q->node[q->rd].right != NULL)
			{
				q->node[q->wr] = *(q->node[q->rd].right);
				q->node[q->wr].val = q->node[q->rd].right->val;
				q->wr++;
				cout << "q->wr2  " << q->wr << endl;
			}
			ret[*returnsize][i] = q->node[q->rd].val;
			q->rd++;
		}
		(*returnsize)++;
		len = q->wr - q->rd;

	}
	return ret;
}


	tree *tree1 = NULL;
	tree1 = create(10);
	insert(tree1, 5);
	insert(tree1, 13);
	insert(tree1, 8);
	insert(tree1, 2);//9
	insert(tree1, 12);
	insert(tree1, 14);
	//interor_right(tree1);
	//int level = 0;
	int returnsize = 0;
	int *comnlueszie = NULL;
	int **p = NULL;
	p = bfs_demo2(tree1,&returnsize,&comnlueszie);
	cout<< returnsize  <<endl;
	if( p == NULL)
		cout << "HELLO" << endl;

	int i = 0,j;
	for (i = 0; i < returnsize; ++i)//总行数
	{
		//cout << comnlueszie[i] << endl;//每行的宽度
		for (j = 0; j < (comnlueszie)[i]; ++j)
		{
			//cout << comnlueszie[i] << endl;
			cout << p[i][j] << endl;
		}
	
	}
