/*
int re(char * str)
{
	typedef struct stack_t {
		char * value;
		int index;
	}stack;

	stack * st = (stack *)malloc(sizeof(stack));
	if (st)
		st->value = (char *)malloc(strlen(str) + 1);
	st->index = 0;
	int i, j=0;
	int flag = -1;

	//char * ptr = str;
	//while ((*str) != '\0')
	//	str++;
	//str--;
	//cout << "dï¼š" << endl;
	//int index = 0;
	//while (index <= strlen(str) / 2)
	//{
	//	swap(ptr++, str--);
	//	index++;
	//}

	for (i = 0; i < strlen(str); i++)
	{
		st->value[st->index] = str[i];
		st->index++;
		printf("------1---%c--%d\n", str[i],i);
	}
	st->value[st->index] = '\0';
	st->index--;
	//st->index--;
	printf("-----st->index------%d\n", st->index);
	cout << str << endl;

	i = 0;
	for (i = 0; st->index>=0; i++)
	{
		str[i] = st->value[st->index];
		st->index--;
		printf("---------%c---%d\n", str[i],i);
	
	}
	cout << str << endl;
	st->index = 0;
	for (i = 0; i <= strlen(str); i++)
	{
		if (str[i] == 32 && flag == -1) //kaitou
			continue;
		if (str[i] == 32 && flag == 0)
			continue;
		st->value[st->index] = str[i];
		if (str[i] == 32 || str[i] == 0)
		{
			flag = 0;
			st->index--;
			printf("-----st->index----%d\n", st->index);
			while (st->index >= 0)
			{
				printf("-----st->value----%c\n", st->value[st->index]);
				//pop_new(st->value, str);
				str[j] = st->value[st->index];
				st->index--;
				j++;
			}
			str[j] = str[i];
			j++;
		}
		else
			flag = 1;

		st->index++;

	}
	return 0;
}





int  cut_str2(char * src)
{
	int len = 0;
	int i = 0;
	for (i = 0; i < strlen(src); i++)
	{

		for (len = 1; len <= strlen(src) / 2; len++)
		{
			
			if (src[i] !=src[i+len])
			{
				continue;
			}
			else
			{
				if (src[i + len + 1] == '\0')
					return 1;
				else
					break;
			}
			
		}

	}
	return 0;
}

*/

void pop (char *stack,char *dest)
{
	strcpy(dest,stack);	
}
int re (char * str)
{
	typedef struct stack_t{
		char * value;
		int index;
	}stack;
	
	stack * st = malloc(sizeof(stack));
	if(st)
		st->value = malloc(strlen(str)+1);
	st->index = 0;	
	int i,j;
	for(i=0;i<=strlen(str);i++)
	{
		st->value[st->index]  = str[i];
		if(str[i]==32 || str[i]== 0)
		{
			while(st->index>=0)
			{
				pop(st->value,str);
				st->index--;
			}
		
		}
		
		st->index++;
	
	}
}


typedef struct btree{
	struct btree  *left;
	struct btree  *right;
	int value;
}tree;



tree * tree_init(tree * tr)
{
	if(tr == NULL)
		return;
	tr->left = tr->right = NULL;
	tr->value = -1;
	return tr;
}

